package struct;

import application.*;

/**
 * A mozdonyt megvalÛsÌtÛ oszt·ly
 */
public class Engine extends ElementBase {
    private boolean active;

    /**
     * @param rail A mozdony kezdıhelye
     */
    public  Engine(RailElement rail){
    	child = null;
        actRail = rail;
        prevRail = null;
        active = true;
        
        parent = null;
        this.setName("Engine " + count++);
    }
    
    /* (non-Javadoc)
     * @see struct.ElementBase#move()
     */
    @Override
    public void move(){
    	if(!active) return;//ha nincs v√©ge a j√°t√©knak, vagy nem akt√≠v, nem mozgatjuk
        
        RailElement nextRail = actRail.getNext(prevRail);//magkapjuk az el≈ëz≈ë poz√≠ci√≥b√≥l kisz√°m√≠tott k√∂vetkez≈ë poz√≠ci√≥t.


        if(nextRail != null && nextRail.getTrainElement() == null){//ha nem siklik ki, √©s nincs akivel √ºtk√∂zne
            prevRail = actRail;
            actRail = nextRail;
            actRail.setTrainElement(this);
            prevRail.setTrainElement(child);//be√°ll√≠tjuk az √∫j √°llapotokat

            if(child != null){
        		child.move();//megpr√≥b√°ljuk mozgatni a kapcsolt kocsikat
        	}
        }
        else if(nextRail != null && nextRail.getTrainElement() != null) {//ha van valaki el≈ëtt√ºnk
            crash(nextRail.getTrainElement().getName().substring(1));//√ºtk√∂z√©s √©s √°tadjuk az idj√°t a vonatnak akivel √ºtk√∂zt√ºnk
            nextRail.getTrainElement().crash(this.getName().substring(1));// m√°sik vonaton is meg kell h√≠vni
        }
        else{// m√°r csak az az eset maradt, hogy nincs el≈ëtt√ºnk s√≠n, ekkor kisiklik a vonat
            derail();
        }
    }

    /**
     * Meg·llÌtja a vonatot
     */
    public void stop(){
    	active = false;
    }//meg lehet √°ll√≠tani

    /**
     * Kisiklik a vonat
     */
    private  void derail(){
        derailed = true;
        active = false;
        Game.gameOver("Vonat kisiklott!");//ekkor is v√©ge lesz a j√°t√©knak
    }

	/* (non-Javadoc)
	 * @see struct.ElementBase#giveToken()
	 */
	@Override
	public void giveToken(){
		child.giveToken();
	}

	/* (non-Javadoc)
	 * @see struct.ElementBase#hasToken()
	 */
	@Override
	public boolean hasToken() {
		return false;
	}

	/* (non-Javadoc)
	 * @see struct.ElementBase#takeToken()
	 */
	@Override
	public void takeToken() {
	}
}
